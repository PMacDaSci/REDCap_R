---
title: "Basics of R Programming Language"
---

## R!

R is a powerful programming language and open-source software widely used for statistical computing and data analysis. This programming language is developed by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand. R has gained popularity among statisticians, data scientists, researchers, and analysts for its flexibility, extensibility, and robust statistical capabilities.

## Why learn R?

Here are several compelling reasons to consider learning R:

-   Statistical Analysis
-   Data Visualization
-   Open Source
-   Community Support
-   Extensibility
-   Integration with Other Languages
-   Data Science and Machine Learning
-   Widely Used in Academia and Industry
-   Continuous Development

## Getting Started with R

To begin working with R, users typically install an Integrated Development Environment (IDE) such as RStudio, which provides a user-friendly interface for coding, debugging, and visualizing results. R scripts are written in the R language and can be executed interactively or saved for later use.

## A look around RStudio

Open RStudio. You will see four windows (aka *panes*). Each window has a different function. The screenshot below shows an [analogy linking the different RStudio windows to cooking](https://twitter.com/RLadiesNCL/status/1138812826917724160).

![](images/rstudiopanes.jpeg){fig-align="center"}

### Console Pane

![](images/console-pane.png){fig-align="center"}

On the left-hand side, you'll find the *console*. This is where you can input commands (code that R can interpret), and the responses to your commands, known as *output*, are displayed here. While the console is handy for experimenting with code, it doesn't save any of your entered commands. Therefore, relying exclusively on the console is not recommended.

### History Pane

![](images/history-pane.png){fig-align="center"}

The *history pane* (located in the top right window) maintains a record of the commands that you have executed in the R console during your current R session. This includes both correct and incorrect commands.

You can navigate through your command history using the up and down arrow keys in the *console*. This allows you to quickly recall and re-run previous commands without retyping them.

### Environment Pane

![](images/environment-pane.png){fig-align="center"}

The *environment pane* (located in the top right window) provides an overview of the objects (variables, data frames, etc.) that currently exist in your R session. It displays the names, types, dimensions, and some content of these objects. This allows you to monitor the state of your workspace in real-time.

### Plotting Pane

![](images/plotting-pane.png){fig-align="center"}

The *plotting pane* (located in the bottom right window) is where graphical output, such as plots and charts, is displayed when you create visualizations in R. The Plotting pane often includes tools for zooming, panning, and exporting plots, providing additional functionality for exploring and customizing your visualizations. Help Pane:

### Help Pane

![](images/help-pane.png){fig-align="center"}

The *help pane* (located in the bottom right window) is a valuable resource for accessing documentation and information about R functions, packages, and commands. When you type a function or command in the console and press the F1 key (Mac: fn + F1) the Help pane displays relevant documentation. Additionally, you can type a keyword in the text box at the top right corner of the Help Pane.

### Files Pane

![](images/files-pane.png){fig-align="center"}

The *files pane* provides a file browser and file management interface within RStudio. It allows you to navigate through your project directories, view files, and manage your file system.

### Packages Pane

![](images/package-pane.png){fig-align="center"}

This pane provides a user-friendly interface for managing R packages. It lists installed packages and allows you to load, unload, update, and install packages.

### Viewer Pane

![](images/viewer-pane.png){fig-align="center"}

It is used to display dynamic content generated by R, such as HTML, Shiny applications, or interactive visualizations.

## Working directory

Opening an RStudio session launches it from a specific location. This is the *working directory*. R looks in the working directory by default to read in data and save files. You can find out what the working directory is by using the command `getwd()`. This shows you the path to your working directory in the console. In Mac this is in the format `/path/to/working/directory` and in Windows `C:\path\to\working\directory`. It is often useful to have your data and R scripts in the same directory and set this as your working directory. We will do this now.

Make a folder for this course somewhere on your computer that you will be able to easily find. Name the folder for example, `Intro_R_course`. Then, to set this folder as your working directory:

In RStudio click on the Files tab and then click on the three dots, as shown below.

![](images/saveworkingdir1.png){fig-align="center"}

In the window that appears, find the folder you created (e.g. `Intro_R_course`), click on it, then click Open. The files tab will now show the contents of your new folder. Click on More → Set As Working Directory, as shown below.

![](images/setworkingdir.png){fig-align="center"}

Note: You can use an RStudio project as described here to automatically keep track of and set the working directory.

## R Scripts

In RStudio, the Script pane (located at the top left window) serves as a dedicated space for writing, editing, and executing R scripts. It is where you compose and organize your R code, making it an essential area for creating reproducible and well-documented analyses.

RStudio provides syntax highlighting in the Script pane, making it easier to identify different components of your code. You can execute individual lines or selections of code from the Script pane. This helps in testing and debugging code without running the entire script.

## Quarto Document

Quarto is an open-source scientific and technical publishing system that allows you to combine text, code, and output in a single document. It is the next-generation version of RMarkdown and is widely used for reproducible research, dynamic reports, and interactive documents.

With Quarto, you can:

-   Write reports that integrate R code and results
-   Create interactive documents (HTML, PDF, Word, and more)
-   Publish research outputs with dynamic figures and tables

Why use Quarto?

-   Reproducibility
-   Combines analysis and documentation in one file
-   Flexible Outputs
-   Generate HTML, PDF, Word, and presentations
-   Works with R, Python, and Julia
-   Supports Markdown Syntax
-   Easy formatting for text and visuals

In this workshop, we will be using Quarto documents to write R code.

### Getting Started with a Quarto Document

Follow these steps to create a new Quarto document in RStudio:

#### Open a New Quarto Document

1.  Open RStudio
2.  Go to File → New File → Quarto Document
3.  A dialog box will appear:
    -   Title: Enter a document title as "Analysing REDCap Data using R"
    -   Format: Leave default format as HTML
    -   Engine: Leave default engine as knitr
4.  Click Create.

This creates a new .qmd file in RStudio, which is a Quarto document.

#### Save the File

1.  Click File → Save As
2.  Choose a meaningful filename, e.g., introR_workshop.qmd
3.  Click Save

#### Understanding the Structure of a Quarto Document

A Quarto document consists of three main sections:

1.  **YAML Header (Metadata Section)**

This section is enclosed at the top of the file using --- and contains metadata. Example:

```{r}
#| eval: false
---
title: "My First Quarto Document"
author: "John Doe"
date: "2025-01-30"
format: html
---
```

Common YAML options:

-   title: Document title
-   author: Name of the author
-   date: Date of the document
-   format: Output type (HTML, PDF, Word, etc.)

2.  **Text and Markdown (Narrative Section)**

Quarto supports Markdown, a simple way to format text.

-   Headings:

    ```         
    # Main Heading
    ## Subheading
    ### Smaller Heading
    ```

-   Bold and Italic Text:

    ```         
    **Bold Text**
    *Italic Text*
    ```

-   Lists:

    ```         
    -   Bullet Point 1
    -   Bullet Point 2
    ```

-   Hyperlinks and Images:

    ```         
    [Click here for Quarto docs](https://quarto.org/)
    ![RStudio Logo](https://www.rstudio.com/wp-content/uploads/2014/04/rstudio-logo.png)
    ```

3.  **Code Blocks (Executable Section)**

Quarto allows you to insert code chunks that run R scripts inside your document.

Example R Code Chunk:

\`\`\`{r}\
\# Example calculation\
x \<- c(1, 2, 3, 4, 5)\
sum(x)\
\`\`\`

To insert a code chunk, go to Code in the menu -\> Insert Code Chunk or use the keyboard shortcuts **Windows/Linux**: <kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>I</kbd> or **Mac**: <kbd>⌘</kbd> + <kbd>Option</kbd> + <kbd>I</kbd>. Code is written inside triple backticks and it is executed when you render the document.

4.  **Running and Rendering a Quarto Document**

To run a single code chunk click the **Run** button at the top of the chunk or use the keyboard shortcut **Windows/Linux**: <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Enter</kbd> or **Mac**: <kbd>⌘</kbd> + <kbd>Shift</kbd> + <kbd>Enter</kbd>.

To generate an output file (HTML, PDF, or Word), click the **Render** button in RStudio. The document compiles and opens the rendered file.

::: {.callout-tip title="Tip"}
If PDF output fails, install `TinyTeX` for `LaTeX` support:

```{r}
#| eval: false
install.packages("tinytex")
```
:::

#### Keyboard Shortcuts in Quarto (Windows & Mac)

| **Action**               | **Windows/Linux**      | **Mac**               |
|--------------------------|------------------------|-----------------------|
| Run a single code line   | `Ctrl + Enter`         | `Cmd + Enter`         |
| Run a single code chunk  | `Ctrl + Shift + Enter` | `Cmd + Shift + Enter` |
| Run all chunks above     | `Ctrl + Alt + P`       | `Cmd + Option + P`    |
| Render (Knit) document   | `Ctrl + Shift + K`     | `Cmd + Shift + K`     |
| Insert a new code chunk  | `Ctrl + Alt + I`       | `Cmd + Option + I`    |
| Comment/uncomment a line | `Ctrl + Shift + C`     | `Cmd + Shift + C`     |
| Open Quarto Render menu  | `Ctrl + Shift + R`     | `Cmd + Shift + R`     |
| Open Quarto preview      | `Ctrl + Shift + O`     | `Cmd + Shift + O`     |
| Restart R session        | `Ctrl + Shift + F10`   | `Cmd + Shift + F10`   |

## Comments

In R, any text following the hash symbol \# is termed a *comment*. R disregards this text, considering it non-executable. Comments serve the purpose of documenting your code, aiding your future understanding of specific lines, and highlighting the intentions or challenges encountered.

RStudio makes it easy to comment or uncomment a paragraph: Select the lines you want to comment (to comment a set of lines) or placing the cursor at any location of a line (to comment a single line), press at the same time on your keyboard <kbd>⌘</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd> (mac) or <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd> (Windows/Linux).

Extensive use of comments is encouraged throughout this course.

```         
# This is a comment. Ignored by R. But useful for me!
```

## Executing Commands

Executing commands or *running code* is the process of submitting a command to your computer, which does some computation and returns an answer. In RStudio, there are several ways to execute commands:

-   Select the line(s) of code using the mouse, and then click **Run** at the top right corner of the R text file.
-   Select **Run Lines** from the Code menu.
-   Click anywhere on the line of code and click **Run**.
-   Select the line(s) you want to run. Press <kbd>⌘</kbd> + <kbd>Return</kbd> (Mac) or <kbd>Ctrl</kbd> + <kbd>Return</kbd> (Windows/Linux) to run the selected code.

We suggest the third option, which is fastest. This link provides a list of useful [RStudio keyboard shortcuts](https://support.posit.co/hc/en-us/articles/200711853-Keyboard-Shortcuts-in-the-RStudio-IDE) that can be beneficial when coding and navigating the RStudio IDE.

When you type in, and then run the commands shown in the grey boxes below, you should see the result in the Console pane at bottom left.

### Simple Maths in R

We can use R as a calculator to do simple maths.

```{r}
3 + 5
```

More complex calculator functions are *built in* to R, which is the reason it is popular among mathematicians and statisticians. To use these functions, we need to call these functions.

### Calling Functions

R has a large collection of built-in functions that are called like this:

```{r}
#| eval: false
function_name(argument1 = value1, argument2 = value2, ...)
```

Let's explore using `seq()` function to create a series of numbers.

Start by typing `se` and then press <kbd>Tab</kbd>. RStudio will suggest possible completions. Specify `seq()` by typing more or use the up/down arrows to select it. You'll see a helpful tooltip-type information pop up, reminding you of the function's arguments. If you need more assistance, press <kbd>F1</kbd> (Windows/linux) or <kbd>fn</kbd> + <kbd>Tab</kbd> (Mac) to access the full documentation in the help tab at the lower right.

Now, type the arguments 1, 10 and press \<kbd\<Return</kbd>.

```{r}
seq(1, 10)
```

You can explicitly specify arguments using the `name = value` format. However, if you don't, R will try to resolve them based on their position.

```{r}
seq(from = 1, to = 10)
```

In this example, it assumes that we want a sequence starting from 1 and ending at 10. Since we didn't mention the step size, it defaults to the value defined in the function, which is 1 in this case.

```{r}
seq(from = 1, to = 10, by = 2)
```

If you are using `name = value` format the order of the arguments **does not** matter.

```{r}
seq(to = 10, by = 2, from = 1)
```

For frequently used functions, I might rely on positional resolution for the first one or two arguments. However, beyond that, I prefer to use the `name = value` format for clarity and precision.

To take the log of 100:

```{r}
log(x = 100, base = 10)
```

To take the square root of 100:

```{r}
sqrt(100) # this is the short-hand of sqrt(x = 100)
```

Notice that the square root function is abbreviated to `sqrt()`. This is to make writing R code faster, however the draw back is that some functions are hard to remember, or to interpret.

## Getting Help

In R, the `?` and `??` operators are used for accessing help documentation, but they behave slightly differently.

-   The `?` operator is used to access help documentation for a specific function or topic. When you type `?` followed by the name of a function, you get detailed information about that function. For example try:

```{r}
?mean
```

```{=html}
<details>
<summary>View Output</summary>
```
```{r, echo = F}
#| classes: helpscroll
#| results: asis
#| echo: false
tools:::Rd2HTML(utils:::.getHelpFile(help(mean)))
```

</details>

The above command displays the help documentation for the `mean` function, providing information about its usage, arguments, and examples.

-   The `??` operator is used for a broader search across help documentation. It performs a search for the specified term or keyword in the documentation.

```{r}
??regression
```

This will search for the term "regression" in the help documentation and return relevant results. It's useful when you want to find functions, packages, or topics related to a specific term.

::: callout-tip
Tab completion A very useful feature is Tab completion. You can start typing and use <kbd>Tab</kbd> to autocomplete code, for example, a function name.
:::

## R Packages

Many developers have built 1000s of functions and shared them with the R user community to help make everyone's work easier and more efficient. These functions (short programs) are generally packaged up together in (wait for it) *Packages*. For example, the tidyverse package is a compilation of many different functions, all of which help with data transformation and visualization. Packages also contain data, which is often included to assist new users with learning the available functions.

### Installing Packages

Packages are hosted on repositories, with [CRAN (Comprehensive R Archive Network)](https://cran.r-project.org/web/packages/available_packages_by_date.html) being the primary repository. To install packages from CRAN, you use the `install.packages()` function. For example:

```{r}
#| eval: false
install.packages("tidyverse")
```

This will spit out a lot of text into the console as the package is being installed. Once complete you should have a message:

`The downloaded binary packages are in...` followed by a long directory name.

To remove an installed package:

```{r}
#| eval: false
remove.packages("tidyverse")
```

### Loading Packages

After installation, you need to load a package into your R session using the `library()` function. For example:

```{r}
library(tidyverse)
```

This makes the functions and datasets from the 'tidyverse' package available for use in your current session.

::: callout-tip
You only need to install a package once. Once installed, you don't need to reinstall it in subsequent sessions. However, you do need to load the package at the beginning of each R session using the `library()` function before you can utilize its functions and features. This ensures that the package is actively available for use in your current session.
:::

To view packages currently loaded into memory:

```{r}
(.packages())
search()
```

### Package Documentation

Each package comes with documentation that explains how to use its functions. You can access this information using the `help()` function or by using `?` before the function name:

```{r}
help(tidyverse)
```

```{=html}
<details>
<summary>View Output</summary>
```
```{r, echo = F}
#| classes: helpscroll
#| results: asis
#| echo: false
tools:::Rd2HTML(utils:::.getHelpFile(help(tidyverse)))
```

</details>

or by using `vignette` (if the documentation is in the form of vignettes):

```{r}
vignette(package="tidyverse")
```

## Variables

A *variable* is a bit of tricky concept, but very important for understanding R. Essentially, a variable is a symbol that we use in place of another value. Usually the other value is a larger/longer form of data. We can tell R to store a lot of data, for example, in a variable named `x`. When we execute the command `x`, R returns all of the data that we stored there.

For now however we'll just use a tiny data set: the number 5. To store some data in a variable, we need to use a special symbol `<-`, which in our case tells R to assign the value 5 to the variable `x`. This is called the **assignment operator**. To insert the assignment operator press <kbd>Option</kbd> + <kbd>-</kbd> (Mac) or <kbd>Alt</kbd> + <kbd>-</kbd> (Windows/Linux).

Let's see how this works.

Create a variable called `x`, that will contain the number 5.

```{r}
x <- 5
```

R won't return anything in the console, but note that you now have a new entry in the environment pane. The variable name is at the left (`x`) and the value that is stored in that variable, is displayed on the right (5).

We can now use `x` in place of 5:

```{r}
x + 10
```

```{r}
x * 3
```

Variables are sometimes referred to as *objects*. In R there are different conventions about how to name variables, but most importantly they:

-   cannot begin with a number
-   should begin with an alphabetical letter
-   they are case sensitive
-   variables can take any name, but its best to use something that makes sense to you, and will likely make sense to others who may read your code.

It is wise to adapt a consistent convention for separating words in variables.

For example:

``` r
# i_use_snake_case
# other.people.use.periods
# evenOthersUseCamelCase
```

## The Pipe Operator (`|>`)

The *pipe* operator (`|>`) is a commonly used feature of the tidyverse. It was originally defined in the (cleverly named) magrittr package, but is also included in the `dplyr`, tidyverse packages. The `|>` symbol can seem confusing and intimidating at first. However, once you understand the basic idea, it can become addicting!

We suggest you use a shortcut: <kbd>⌘</kbd> + <kbd>Shift</kbd> + <kbd>M</kbd> (Mac) or <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>M</kbd> (Windows/Linux).

The `|>` symbol is placed between a value on the left and a function on the right. The `|>` simply takes the value to the left and passes it to the function on the right as the first argument. It acts as a "pipe". That's it!

Suppose we have a variable, `x`.

```{r}
x <- 7
```

The following are the exact same.

```{r}
sqrt(x)
```

```{r}
x |> sqrt()
```

We'll continue to use `|>` throughout this tutorial to show how useful it can be for chaining various data manipulation steps during an analysis.

## Clearing the Environment

Take a look at the objects you have created in your workspace that is accumulated in the environment pane in the upper right corner of RStudio.

![](images/environment-variables.png){fig-align="center"}

You can obtain a list of objects in your workspace using a couple of different R commands:

```{r}
#| eval: false
objects()
```

```{=html}
<details>
<summary>Output</summary>
```
```{r}
#| echo: false
objects()
```

</details>

```{r}
#| eval: false
ls()
```

```{=html}
<details>
<summary>Output</summary>
```
```{r}
#| echo: false
ls()
```

</details>

If you wish to remove a specific object, let's say `x1`, you can use the following command:

``` r
rm(x1)
```

To remove all objects:

``` r
rm(list = ls())
```

Alternatively, you can click the broom icon in RStudio's Environment pane to clear everything.

For the sake of reproducibility, it's crucial to regularly delete your objects and restart your R session. This ensures that your analysis can be replicated next week or even after upgrading your operating system. Restarting your R session helps identify and address any dependencies or configurations needed for your analysis to run successfully.

# Importing REDCap Data

## Importing Data via API

**REDCap** (Research Electronic Data Capture) provides an Application Programming Interface (API) that allows users to programmatically access and interact with their project data. The API enables automation of data retrieval, updates, and exports, reducing manual effort and ensuring reproducibility in data analysis.

### What is the REDCap API?

The REDCap API is a web-based service that allows users to interact with REDCap programmatically. Instead of manually downloading CSV files, users can use the API to:

-   Retrieve records from a REDCap project
-   Import new data or update existing records
-   Export metadata (variable names, field types)
-   Pull longitudinal and repeating instrument data
-   Generate reports dynamically

The API facilitates automated data retrieval, making it a powerful tool for integrating REDCap data into R-based workflows.

::: {.callout-tip title="Example Use Case"}
A researcher can schedule a daily script in R to pull the latest REDCap data for real-time analysis instead of manually exporting files from the web interface.
:::

### Requesting an API Token in REDCap

To access the API, users must obtain an API token, which is a unique, secure key that authenticates requests. REDCap provides API tokens at the user-project level. This means that if three users on the same project need to use the API, each user will need to individually request an API token. Similarly, if one user wants an API token for three different projects, they will need to request an API token for each project.

**Steps to Request an API Token for a Project:**

1.  Log in to REDCap and navigate to your project.
2.  If your REDCap project has API access enabled, you will see it in the applications on the left side of the screen as follows. Otherwise contact [REDCapServiceDesk\@petermac.org](REDCapServiceDesk@petermac.org).

![](images/api-01.jpeg)

3.  Click on "API" under the Applications menu.

4.  Click "Request API token" to send a token request to the REDCap administrative team. ![](images/request-api.png)

5.  Your REDCap administrator will review and approve your request.

6.  Once approved, you will receive a unique API token (a long alphanumeric string).

![](images/api-token.png)

::: {.callout-important title="Important"}
Keep your API token private and never share it. It grants full access to your REDCap project data.
:::

### Using the REDCap API

The best way to familiarize yourself with the REDCap API is to explore the API Playground.

1.  Click on the "API Playground" link from the left-hand menu under "Applications."

2.  Once in the API Playground, there is a blue box with a dropdown menu labeled "API Method." This dropdown includes all the API actions REDCap can take.

![](images/api-playground.png)

    a.  If a project is in production, the methods listed in this dropdown will be limited so as not to affect real data in the project. This is noted in the green text under the "API Method" dropdown.

3.  Select the method you need from the dropdown menu and complete the additional information. The additional information (e.g., "Format", "Instrument", etc.) will vary depending on which API method you choose and the project structure. In the above example, the researcher is asking to export project information as a CSV.

    a.  To see all the API functions REDCap is capable of, and export a .zip file of sample code, click on the ["REDCap API documentation"](https://redcap.petermac.org.au/api/help/) link that is available on both the "API" page and in the "API Playground."

4.  When you scroll further down the page, there is an open text box with a series of tabs on the top, with each tab corresponding to a coding language. Each tab will provide the API code in the indicated language.

![](images/api-R.png)

5.  To execute a real API request, click the "Execute Request" button, and it will display the API response in a textbox as follows.

    ![](images/api-response.png)

On the API Playground, there is a button that will let you "Execute Request." This will perform the API action you are programming and thus affect the data in your project. Use this button with a great amount of caution.

::: {.callout-important title="Security Considerations for API Access"}
Since the API token provides direct access to your REDCap project, it must be handled securely.

**Best Practices for API Security:**

-   **Never** share your API token with anyone. Keep your API token private. -- Never hardcode it in scripts.
-   Do not test API tokens in browsers. Using an API token in plain text within a script is unsecure. An API token should be encrypted within a script, be called via secure environment variables, or otherwise be accessible from the script via other secure mechanisms.
-   Before you share code anywhere, remove your API token.
-   Enable logging and monitor API access regularly.
-   Revoke unused API tokens if they are no longer needed.
-   Regenerate your API token every 90 days, or at any point that you think your token has been compromised. To regenerate your token, go to the API page and select "Regenerate token." If you are no longer using the API functionality on your project, delete your token.

![](images/api-token.png)
:::

### Using an Environment Variable for API Token in R

You can save your API keys into a "hidden" file containing code that runs when you start R. That file is called the ".Renviron". It can be a bit of a pain to find this file. So the best option is to install the `usethis` package, which contains helper functions, including a function to find this file.

```{r}
#| eval: false
install.packages("remotes")
remotes::install_cran("usethis")
```

When it comes to add packages to your copy of R, the `install_cran()` function in the remotes package is superior to the usual `install.packages()` function because it will first check to see if you already have the latest version before bothering to download and install.

After installing `usethis` you can access your ".Renviron" file by typing this in your console.

```{r}
#| eval: false
usethis::edit_r_environ()
```

It will cause the file to open. Create a name for your API key (for example: `rcap_immuno_key`) and add a line like this to your .Renviron file:

```{raw}
rcap_immuno_key="your_api_token_here"
```

When you click the link you will be given the option to create an API Token for this project. Copy the token created in the previous section from REDCap website, and paste it in the .Renviron file as explained above. Instead of `your_api_token_here` in the .Renviron file, your token should be there within "".

After adding the line, remember to save the file and completely **restart R/RStudio.** Once R restarts, you can access the key like this:

```{r}
api_token <- Sys.getenv("rcap_immuno_key")
```

Once you have an API token, you can test whether it works using httr in R.

::: {.callout-tip title="Example: Checking Project Information"}

```{r}
library(REDCapR)

# Define API URL and Token
url <- "https://redcap.petermac.org.au/api/"
token <- Sys.getenv("rcap_immuno_key")  # Load token securely

# Test API connection
formData <- list("token"=token,
    content='project',
    format='csv',
    returnFormat='json'
)
response <- httr::POST(url, body = formData, encode = "form")
result <- httr::content(response)

# Print project details
result
```

:::

If the request is successful, you should see metadata about your REDCap project as shown above.



