
# Basics of R Programming Language

## R!

R is a powerful programming language and open-source software widely used for statistical computing and data analysis. This programming language is developed by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand. R has gained popularity among statisticians, data scientists, researchers, and analysts for its flexibility, extensibility, and robust statistical capabilities.

## Why learn R?

Here are several compelling reasons to consider learning R:

-   Statistical Analysis
-   Data Visualization
-   Open Source
-   Community Support
-   Extensibility
-   Integration with Other Languages
-   Data Science and Machine Learning
-   Widely Used in Academia and Industry
-   Continuous Development

## Getting Started with R

To begin working with R, users typically install an Integrated Development Environment (IDE) such as RStudio, which provides a user-friendly interface for coding, debugging, and visualizing results. R scripts are written in the R language and can be executed interactively or saved for later use.

## A look around RStudio

Open RStudio. You will see four windows (aka *panes*). Each window has a different function. The screenshot below shows an [analogy linking the different RStudio windows to cooking](https://twitter.com/RLadiesNCL/status/1138812826917724160).

![](images/rstudiopanes.jpeg){fig-align="center"}

### Console Pane

![](images/console-pane.png){fig-align="center"}

On the left-hand side, you'll find the *console*. This is where you can input commands (code that R can interpret), and the responses to your commands, known as *output*, are displayed here. While the console is handy for experimenting with code, it doesn't save any of your entered commands. Therefore, relying exclusively on the console is not recommended.

### History Pane

![](images/history-pane.png){fig-align="center"}

The *history pane* (located in the top right window) maintains a record of the commands that you have executed in the R console during your current R session. This includes both correct and incorrect commands.

You can navigate through your command history using the up and down arrow keys in the *console*. This allows you to quickly recall and re-run previous commands without retyping them.

### Environment Pane

![](images/environment-pane.png){fig-align="center"}

The *environment pane* (located in the top right window) provides an overview of the objects (variables, data frames, etc.) that currently exist in your R session. It displays the names, types, dimensions, and some content of these objects. This allows you to monitor the state of your workspace in real-time.

### Plotting Pane

![](images/plotting-pane.png){fig-align="center"}

The *plotting pane* (located in the bottom right window) is where graphical output, such as plots and charts, is displayed when you create visualizations in R. The Plotting pane often includes tools for zooming, panning, and exporting plots, providing additional functionality for exploring and customizing your visualizations. Help Pane:

### Help Pane

![](images/help-pane.png){fig-align="center"}

The *help pane* (located in the bottom right window) is a valuable resource for accessing documentation and information about R functions, packages, and commands. When you type a function or command in the console and press the F1 key (Mac: fn + F1) the Help pane displays relevant documentation. Additionally, you can type a keyword in the text box at the top right corner of the Help Pane.

### Files Pane

![](images/files-pane.png){fig-align="center"}

The *files pane* provides a file browser and file management interface within RStudio. It allows you to navigate through your project directories, view files, and manage your file system.

### Packages Pane

![](images/package-pane.png){fig-align="center"}

This pane provides a user-friendly interface for managing R packages. It lists installed packages and allows you to load, unload, update, and install packages.

### Viewer Pane

![](images/viewer-pane.png){fig-align="center"}

It is used to display dynamic content generated by R, such as HTML, Shiny applications, or interactive visualizations.

## Working directory

Opening an RStudio session launches it from a specific location. This is the *working directory*. R looks in the working directory by default to read in data and save files. You can find out what the working directory is by using the command `getwd()`. This shows you the path to your working directory in the console. In Mac this is in the format `/path/to/working/directory` and in Windows `C:\path\to\working\directory`. It is often useful to have your data and R scripts in the same directory and set this as your working directory. We will do this now.

Make a folder for this course somewhere on your computer that you will be able to easily find. Name the folder for example, `Intro_R_REDCap_course`. Then, to set this folder as your working directory:

In RStudio click on the Files tab and then click on the three dots, as shown below.

![](images/saveworkingdir1.png){fig-align="center"}

In the window that appears, find the folder you created (e.g. `Intro_R_REDCap_course`), click on it, then click Open. The files tab will now show the contents of your new folder. Click on More → Set As Working Directory, as shown below.

![](images/setworkingdir.png){fig-align="center"}

Note: You can use an RStudio project as described here to automatically keep track of and set the working directory.

## R Scripts

In RStudio, the Script pane (located at the top left window) serves as a dedicated space for writing, editing, and executing R scripts. It is where you compose and organize your R code, making it an essential area for creating reproducible and well-documented analyses.

RStudio provides syntax highlighting in the Script pane, making it easier to identify different components of your code. You can execute individual lines or selections of code from the Script pane. This helps in testing and debugging code without running the entire script.

## Quarto Document

Quarto is an open-source scientific and technical publishing system that allows you to combine text, code, and output in a single document. It is the next-generation version of RMarkdown and is widely used for reproducible research, dynamic reports, and interactive documents.

With Quarto, you can:

-   Write reports that integrate R code and results
-   Create interactive documents (HTML, PDF, Word, and more)
-   Publish research outputs with dynamic figures and tables

Why use Quarto?

-   Reproducibility
-   Combines analysis and documentation in one file
-   Flexible Outputs
-   Generate HTML, PDF, Word, and presentations
-   Works with R, Python, and Julia
-   Supports Markdown Syntax
-   Easy formatting for text and visuals

In this workshop, we will be using Quarto documents to write R code.

### Getting Started with a Quarto Document

Follow these steps to create a new Quarto document in RStudio:

#### Open a New Quarto Document

1.  Open RStudio
2.  Go to File → New File → Quarto Document
3.  A dialog box will appear:
    -   Title: Enter a document title as "Analysing REDCap Data using R"
    -   Format: Leave default format as HTML
    -   Engine: Leave default engine as knitr
4.  Click Create.

This creates a new .qmd file in RStudio, which is a Quarto document.

#### Save the File

1.  Click File → Save As
2.  Choose a meaningful filename, e.g., introR_workshop.qmd
3.  Click Save

#### Understanding the Structure of a Quarto Document

A Quarto document consists of three main sections:

1.  **YAML Header (Metadata Section)**

This section is enclosed at the top of the file using --- and contains metadata. Example:

```{r}
#| eval: false
---
title: "My First Quarto Document"
author: "John Doe"
date: "2025-01-30"
format: html
---
```

Common YAML options:

-   title: Document title
-   author: Name of the author
-   date: Date of the document
-   format: Output type (HTML, PDF, Word, etc.)

2.  **Text and Markdown (Narrative Section)**

Quarto supports Markdown, a simple way to format text.

-   Headings:

    ```         
    # Main Heading
    ## Subheading
    ### Smaller Heading
    ```

-   Bold and Italic Text:

    ```         
    **Bold Text**
    *Italic Text*
    ```

-   Lists:

    ```         
    -   Bullet Point 1
    -   Bullet Point 2
    ```

-   Hyperlinks and Images:

    ```         
    [Click here for Quarto docs](https://quarto.org/)
    ![RStudio Logo](https://www.rstudio.com/wp-content/uploads/2014/04/rstudio-logo.png)
    ```

3.  **Code Blocks (Executable Section)**

Quarto allows you to insert code chunks that run R scripts inside your document.

Example R Code Chunk:

\`\`\`{r}\
\# Example calculation\
x \<- c(1, 2, 3, 4, 5)\
sum(x)\
\`\`\`

To insert a code chunk, go to Code in the menu -\> Insert Code Chunk or use the keyboard shortcuts **Windows/Linux**: <kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>I</kbd> or **Mac**: <kbd>⌘</kbd> + <kbd>Option</kbd> + <kbd>I</kbd>. Code is written inside triple backticks and it is executed when you render the document.

4.  **Running and Rendering a Quarto Document**

To run a single code chunk click the **Run** button at the top of the chunk or use the keyboard shortcut **Windows/Linux**: <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Enter</kbd> or **Mac**: <kbd>⌘</kbd> + <kbd>Shift</kbd> + <kbd>Enter</kbd>.

To generate an output file (HTML, PDF, or Word), click the **Render** button in RStudio. The document compiles and opens the rendered file.

::: {.callout-tip title="Tip"}
If PDF output fails, install `TinyTeX` for `LaTeX` support:

```{r}
#| eval: false
install.packages("tinytex")
```
:::

#### Keyboard Shortcuts in Quarto (Windows & Mac)

| **Action**               | **Windows/Linux**      | **Mac**               |
|--------------------------|------------------------|-----------------------|
| Run a single code line   | `Ctrl + Enter`         | `Cmd + Enter`         |
| Run a single code chunk  | `Ctrl + Shift + Enter` | `Cmd + Shift + Enter` |
| Run all chunks above     | `Ctrl + Alt + P`       | `Cmd + Option + P`    |
| Render (Knit) document   | `Ctrl + Shift + K`     | `Cmd + Shift + K`     |
| Insert a new code chunk  | `Ctrl + Alt + I`       | `Cmd + Option + I`    |
| Comment/uncomment a line | `Ctrl + Shift + C`     | `Cmd + Shift + C`     |
| Open Quarto Render menu  | `Ctrl + Shift + R`     | `Cmd + Shift + R`     |
| Open Quarto preview      | `Ctrl + Shift + O`     | `Cmd + Shift + O`     |
| Restart R session        | `Ctrl + Shift + F10`   | `Cmd + Shift + F10`   |

## Comments

In R, any text following the hash symbol \# is termed a *comment*. R disregards this text, considering it non-executable. Comments serve the purpose of documenting your code, aiding your future understanding of specific lines, and highlighting the intentions or challenges encountered.

RStudio makes it easy to comment or uncomment a paragraph: Select the lines you want to comment (to comment a set of lines) or placing the cursor at any location of a line (to comment a single line), press at the same time on your keyboard <kbd>⌘</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd> (mac) or <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd> (Windows/Linux).

Extensive use of comments is encouraged throughout this course.

```         
# This is a comment. Ignored by R. But useful for me!
```

## Executing Commands

Executing commands or *running code* is the process of submitting a command to your computer, which does some computation and returns an answer. In RStudio, there are several ways to execute commands:

-   Select the line(s) of code using the mouse, and then click **Run** at the top right corner of the R text file.
-   Select **Run Lines** from the Code menu.
-   Click anywhere on the line of code and click **Run**.
-   Select the line(s) you want to run. Press <kbd>⌘</kbd> + <kbd>Return</kbd> (Mac) or <kbd>Ctrl</kbd> + <kbd>Return</kbd> (Windows/Linux) to run the selected code.

We suggest the third option, which is fastest. This link provides a list of useful [RStudio keyboard shortcuts](https://support.posit.co/hc/en-us/articles/200711853-Keyboard-Shortcuts-in-the-RStudio-IDE) that can be beneficial when coding and navigating the RStudio IDE.

When you type in, and then run the commands shown in the grey boxes below, you should see the result in the Console pane at bottom left.

### Simple Maths in R

We can use R as a calculator to do simple maths.

```{r}
3 + 5
```

More complex calculator functions are *built in* to R, which is the reason it is popular among mathematicians and statisticians. To use these functions, we need to call these functions.

### Calling Functions

R has a large collection of built-in functions that are called like this:

```{r}
#| eval: false
function_name(argument1 = value1, argument2 = value2, ...)
```

Let's explore using `seq()` function to create a series of numbers.

Start by typing `se` and then press <kbd>Tab</kbd>. RStudio will suggest possible completions. Specify `seq()` by typing more or use the up/down arrows to select it. You'll see a helpful tooltip-type information pop up, reminding you of the function's arguments. If you need more assistance, press <kbd>F1</kbd> (Windows/linux) or <kbd>fn</kbd> + <kbd>Tab</kbd> (Mac) to access the full documentation in the help tab at the lower right.

Now, type the arguments 1, 10 and press \<kbd\<Return</kbd>.

```{r}
seq(1, 10)
```

You can explicitly specify arguments using the `name = value` format. However, if you don't, R will try to resolve them based on their position.

```{r}
seq(from = 1, to = 10)
```

In this example, it assumes that we want a sequence starting from 1 and ending at 10. Since we didn't mention the step size, it defaults to the value defined in the function, which is 1 in this case.

```{r}
seq(from = 1, to = 10, by = 2)
```

If you are using `name = value` format the order of the arguments **does not** matter.

```{r}
seq(to = 10, by = 2, from = 1)
```

For frequently used functions, I might rely on positional resolution for the first one or two arguments. However, beyond that, I prefer to use the `name = value` format for clarity and precision.

To take the log of 100:

```{r}
log(x = 100, base = 10)
```

To take the square root of 100:

```{r}
sqrt(100) # this is the short-hand of sqrt(x = 100)
```

Notice that the square root function is abbreviated to `sqrt()`. This is to make writing R code faster, however the draw back is that some functions are hard to remember, or to interpret.

## Getting Help

In R, the `?` and `??` operators are used for accessing help documentation, but they behave slightly differently.

-   The `?` operator is used to access help documentation for a specific function or topic. When you type `?` followed by the name of a function, you get detailed information about that function. For example try:

```{r}
?mean
```

```{=html}
<details>
<summary>View Output</summary>
```
```{r, echo = F}
#| classes: helpscroll
#| results: asis
#| echo: false
tools:::Rd2HTML(utils:::.getHelpFile(help(mean)))
```

</details>

The above command displays the help documentation for the `mean` function, providing information about its usage, arguments, and examples.

-   The `??` operator is used for a broader search across help documentation. It performs a search for the specified term or keyword in the documentation.

```{r}
??regression
```

This will search for the term "regression" in the help documentation and return relevant results. It's useful when you want to find functions, packages, or topics related to a specific term.

::: callout-tip
Tab completion A very useful feature is Tab completion. You can start typing and use <kbd>Tab</kbd> to autocomplete code, for example, a function name.
:::

## R Packages

Many developers have built 1000s of functions and shared them with the R user community to help make everyone's work easier and more efficient. These functions (short programs) are generally packaged up together in (wait for it) *Packages*. For example, the tidyverse package is a compilation of many different functions, all of which help with data transformation and visualization. Packages also contain data, which is often included to assist new users with learning the available functions.

### Installing Packages

Packages are hosted on repositories, with [CRAN (Comprehensive R Archive Network)](https://cran.r-project.org/web/packages/available_packages_by_date.html) being the primary repository. To install packages from CRAN, you use the `install.packages()` function. For example:

```{r}
#| eval: false
install.packages("tidyverse")
```

This will spit out a lot of text into the console as the package is being installed. Once complete you should have a message:

`The downloaded binary packages are in...` followed by a long directory name.

To remove an installed package:

```{r}
#| eval: false
remove.packages("tidyverse")
```

### Loading Packages

After installation, you need to load a package into your R session using the `library()` function. For example:

```{r}
library(tidyverse)
```

This makes the functions and datasets from the 'tidyverse' package available for use in your current session.

::: callout-tip
You only need to install a package once. Once installed, you don't need to reinstall it in subsequent sessions. However, you do need to load the package at the beginning of each R session using the `library()` function before you can utilize its functions and features. This ensures that the package is actively available for use in your current session.
:::

To view packages currently loaded into memory:

```{r}
(.packages())
search()
```

### Package Documentation

Each package comes with documentation that explains how to use its functions. You can access this information using the `help()` function or by using `?` before the function name:

```{r}
help(tidyverse)
```

```{=html}
<details>
<summary>View Output</summary>
```
```{r, echo = F}
#| classes: helpscroll
#| results: asis
#| echo: false
tools:::Rd2HTML(utils:::.getHelpFile(help(tidyverse)))
```

</details>

or by using `vignette` (if the documentation is in the form of vignettes):

```{r}
vignette(package="tidyverse")
```

## Variables

A *variable* is a bit of tricky concept, but very important for understanding R. Essentially, a variable is a symbol that we use in place of another value. Usually the other value is a larger/longer form of data. We can tell R to store a lot of data, for example, in a variable named `x`. When we execute the command `x`, R returns all of the data that we stored there.

For now however we'll just use a tiny data set: the number 5. To store some data in a variable, we need to use a special symbol `<-`, which in our case tells R to assign the value 5 to the variable `x`. This is called the **assignment operator**. To insert the assignment operator press <kbd>Option</kbd> + <kbd>-</kbd> (Mac) or <kbd>Alt</kbd> + <kbd>-</kbd> (Windows/Linux).

Let's see how this works.

Create a variable called `x`, that will contain the number 5.

```{r}
x <- 5
```

R won't return anything in the console, but note that you now have a new entry in the environment pane. The variable name is at the left (`x`) and the value that is stored in that variable, is displayed on the right (5).

We can now use `x` in place of 5:

```{r}
x + 10
```

```{r}
x * 3
```

Variables are sometimes referred to as *objects*. In R there are different conventions about how to name variables, but most importantly they:

-   cannot begin with a number
-   should begin with an alphabetical letter
-   they are case sensitive
-   variables can take any name, but its best to use something that makes sense to you, and will likely make sense to others who may read your code.

It is wise to adapt a consistent convention for separating words in variables.

For example:

``` r
# i_use_snake_case
# other.people.use.periods
# evenOthersUseCamelCase
```

## Clearing the Environment

Take a look at the objects you have created in your workspace that is accumulated in the environment pane in the upper right corner of RStudio.

![](images/environment-variables.png){fig-align="center"}

You can obtain a list of objects in your workspace using a couple of different R commands:

```{r}
#| eval: false
objects()
```

```{=html}
<details>
<summary>Output</summary>
```
```{r}
#| echo: false
objects()
```

</details>

```{r}
#| eval: false
ls()
```

```{=html}
<details>
<summary>Output</summary>
```
```{r}
#| echo: false
ls()
```

</details>

If you wish to remove a specific object, let's say `x1`, you can use the following command:

``` r
rm(x1)
```

To remove all objects:

``` r
rm(list = ls())
```

Alternatively, you can click the broom icon in RStudio's Environment pane to clear everything.

For the sake of reproducibility, it's crucial to regularly delete your objects and restart your R session. This ensures that your analysis can be replicated next week or even after upgrading your operating system. Restarting your R session helps identify and address any dependencies or configurations needed for your analysis to run successfully.

# Case Study: Immunotherapy Dataset

In this workshop, we are using a dummy Immunotherapy dataset on REDCap filled with randomly generated data. Therefore, note that in some cases the data can make no sense. However, this will be useful for learning how to import data into R, data manipulation and basic visualization. 

This dataset contains 15 instruments or forms namely: Demographics, Melanoma Data, Adjuvant Therapy, Systemic Therapy for Advanced Disease, Melanoma CNS Metastases, Adverse Events, Baseline Visit, Checkpoint Inhibitor Treatment, Immune Related Adverse Events (irAEs), Pathology, Hypophysitis CT/MRI Imaging, PET irAE Imaging, PPI and Antibiotic use during treatment with CPIs, Response Data, and Mortality Data.       

![](images/record-status-dashboard.png)

# Importing REDCap Data

## REDCap API

**REDCap** (Research Electronic Data Capture) provides an Application Programming Interface (API) that allows users to programmatically access and interact with their project data. The API enables automation of data retrieval, updates, and exports, reducing manual effort and ensuring reproducibility in data analysis.

### What is the REDCap API?

The REDCap API is a web-based service that allows users to interact with REDCap programmatically. Instead of manually downloading CSV files, users can use the API to:

-   Retrieve records from a REDCap project
-   Import new data or update existing records
-   Export metadata (variable names, field types)
-   Pull longitudinal and repeating instrument data
-   Generate reports dynamically

The API facilitates automated data retrieval, making it a powerful tool for integrating REDCap data into R-based workflows.

::: {.callout-tip title="Example Use Case"}
A researcher can schedule a daily script in R to pull the latest REDCap data for real-time analysis instead of manually exporting files from the web interface.
:::

### Requesting an API Token in REDCap

To access the API, users must obtain an API token, which is a unique, secure key that authenticates requests. REDCap provides API tokens at the user-project level. This means that if three users on the same project need to use the API, each user will need to individually request an API token. Similarly, if one user wants an API token for three different projects, they will need to request an API token for each project.

**Steps to Request an API Token for a Project:**

1.  Log in to REDCap and navigate to your project.
2.  If your REDCap project has API access enabled, you will see it in the applications on the left side of the screen as follows. Otherwise contact [REDCapServiceDesk\@petermac.org](REDCapServiceDesk@petermac.org).

![](images/api-01.jpeg)

3.  Click on "API" under the Applications menu.

4.  Click "Request API token" to send a token request to the REDCap administrative team. ![](images/request-api.png)

5.  Your REDCap administrator will review and approve your request.

6.  Once approved, you will receive a unique API token (a long alphanumeric string).

![](images/api-token.png)

::: {.callout-important title="Important"}
Keep your API token private and never share it. It grants full access to your REDCap project data.
:::

### Using the REDCap API

The best way to familiarize yourself with the REDCap API is to explore the API Playground.

1.  Click on the "API Playground" link from the left-hand menu under "Applications."

2.  Once in the API Playground, there is a blue box with a dropdown menu labeled "API Method." This dropdown includes all the API actions REDCap can take.

![](images/api-playground.png)

    a.  If a project is in production, the methods listed in this dropdown will be limited so as not to affect real data in the project. This is noted in the green text under the "API Method" dropdown.

3.  Select the method you need from the dropdown menu and complete the additional information. The additional information (e.g., "Format", "Instrument", etc.) will vary depending on which API method you choose and the project structure. In the above example, the researcher is asking to export project information as a CSV.

    a.  To see all the API functions REDCap is capable of, and export a .zip file of sample code, click on the ["REDCap API documentation"](https://redcap.petermac.org.au/api/help/) link that is available on both the "API" page and in the "API Playground."

4.  When you scroll further down the page, there is an open text box with a series of tabs on the top, with each tab corresponding to a coding language. Each tab will provide the API code in the indicated language.

![](images/api-R.png)

5.  To execute a real API request, click the "Execute Request" button, and it will display the API response in a textbox as follows.

    ![](images/api-response.png)

On the API Playground, there is a button that will let you "Execute Request." This will perform the API action you are programming and thus affect the data in your project. Use this button with a great amount of caution.

::: {.callout-important title="Security Considerations for API Access"}
Since the API token provides direct access to your REDCap project, it must be handled securely.

**Best Practices for API Security:**

-   **Never** share your API token with anyone. Keep your API token private. -- Never hardcode it in scripts.
-   Do not test API tokens in browsers. Using an API token in plain text within a script is unsecure. An API token should be encrypted within a script, be called via secure environment variables, or otherwise be accessible from the script via other secure mechanisms.
-   Before you share code anywhere, remove your API token.
-   Enable logging and monitor API access regularly.
-   Revoke unused API tokens if they are no longer needed.
-   Regenerate your API token every 90 days, or at any point that you think your token has been compromised. To regenerate your token, go to the API page and select "Regenerate token." If you are no longer using the API functionality on your project, delete your token.

![](images/api-token.png)
:::

### Using an Environment Variable for API Token in R

You can save your API keys into a "hidden" file containing code that runs when you start R. That file is called the ".Renviron". It can be a bit of a pain to find this file. So the best option is to install the `usethis` package, which contains helper functions, including a function to find this file.

```{r}
#| eval: false
install.packages("remotes")
remotes::install_cran("usethis")
```

When it comes to add packages to your copy of R, the `install_cran()` function in the remotes package is superior to the usual `install.packages()` function because it will first check to see if you already have the latest version before bothering to download and install.

After installing `usethis` you can access your ".Renviron" file by typing this in your console.

```{r}
#| eval: false
usethis::edit_r_environ()
```

It will cause the file to open. Create a name for your API key (for example: `rcap_immuno_key`) and add a line like this to your .Renviron file:

```{raw}
rcap_immuno_key="your_api_token_here"
```

When you click the link you will be given the option to create an API Token for this project. Copy the token created in the previous section from REDCap website, and paste it in the .Renviron file as explained above. Instead of `your_api_token_here` in the .Renviron file, your token should be there within "".

After adding the line, remember to save the file and completely **restart R/RStudio.** Once R restarts, you can access the key like this:

```{r}
api_token <- Sys.getenv("rcap_immuno_key")
```

Once you have an API token, you can test whether it works using httr in R.

::: {.callout-tip title="Example: Checking Project Information"}

```{r}
#| warning: false

library(REDCapR)

# Define API URL and Token
url <- "https://redcap.petermac.org.au/api/"
token <- Sys.getenv("rcap_immuno_key")  # Load token securely

# Test API connection
formData <- list("token"=token,
    content='project',
    format='csv',
    returnFormat='json'
)
response <- httr::POST(url, body = formData, encode = "form")
result <- httr::content(response)

# Print project details
result
```

:::

If the request is successful, you should see metadata about your REDCap project as shown above.

## Importing REDCap Data via API

Once you have set up your API token securely, you can use R to retrieve data directly from REDCap. The `REDCapR` package provides an interface to streamline API calls from R, making it easy to import records from a REDCap project. 

### Reading REDCap Data

```{r}
requireNamespace("REDCapR")
# If this fails, run install.packages("REDCapR") or remotes::install_github(repo="OuhscBbmc/REDCapR")
```

#### Set project-wide values

There is some information that is specific to the REDCap project, as opposed to an individual operation. This includes: 
  1. the uniform resource identifier (uri) of the server
  2. the token for the user’s project.

```{r}
library(REDCapR)

# Define API URL and Token
uri <- "https://redcap.petermac.org.au/api/"
token <- Sys.getenv("rcap_immuno_key")  # Load token securely
```

#### Read all records and fields

By default, the `redcap_read()` function retrieves the entire dataset from a REDCap project if no filtering parameters (such as records or fields) are specified. 

```{r}
#| warning: false

# Read the entire dataset
immuno_all_rows_all_fields <- redcap_read(redcap_uri = uri, token = token)$data

# print the top 6 rows
head(immuno_all_rows_all_fields)
```

#### Read a subset of records

In many cases, you may only need data for a specific subset of records (e.g., certain patients). You can achieve this by specifying a list of record IDs in the records argument of `redcap_read()` as follows.

Pass an array (where each element is a record ID) to the records parameter:

```{r}
#| warning: false

# Define the specific records to retrieve
selected_records <- c(985, 990, 1005)  # Replace with actual record IDs

# Read only the selected records
immuno_some_records <- redcap_read(
  redcap_uri = uri, 
  token = token, 
  records = selected_records
)$data

# print all rows
immuno_some_records
```

#### Read a subset of fields

If you only need specific variables (e.g., record_id, dob, gender), you can specify a list of field names in the fields argument of `redcap_read()`.

```{r}
#| warning: false

# Define the specific records to retrieve
selected_fields <- c("first_name", "dob", "mortality_date")  # Replace with actual record IDs

# Read only the selected records
immuno_some_fields <- redcap_read(
  redcap_uri = uri, 
  token = token, 
  fields = selected_fields
)$data

# print the top 6 rows
head(immuno_some_fields)
```

In all these cases, the data imported into R from REDCap is in its **raw format**. For example, a categorical variable like sex, which is expected to contain values such as “Male” or “Female,” may instead be represented as numeric codes (e.g., 1 for Male, 2 for Female). While these values can be manually recoded in R, doing so for large projects with multiple categorical variables can quickly become cumbersome and error-prone.

Furthermore, **complex study designs**—such as those used in *clinical trials, cohort studies, and observational research*—often involve **longitudinal data** or **repeating instruments**, adding another layer of complexity to data management.

- **Longitudinal data** is used when information is collected at *multiple time points or study events* (e.g., Baseline, Follow-up).
  ![](images/longitudinal.png)
- **Repeating instruments** allow a single form to be completed *multiple times per participant* (e.g., recording multiple adverse events, medications, or hospital visits).
  ![](images/repeating.png)

Handling these *structured data formats* in R requires additional steps for cleaning and organization.

To address these challenges, the `REDCapTidieR` package extends the functionality of `REDCapR`, making it easier to analyze complex REDCap datasets. 

#### Reading all REDCap data

Unlike `REDCapR`, which returns a single large dataframe, `REDCapTidieR` automatically structures and organizes the data by breaking it into separate tibbles, each representing a different REDCap instrument. This makes it easier to work with studies involving multiple forms and events.

Before using `REDCapTidieR`, ensure it is installed along with its dependencies:

```{r}
requireNamespace("REDCapTidieR")
# If this fails, run install.packages("REDCapTidieR") or devtools::install_github("CHOP-CGTInformatics/REDCapTidieR")
```

To import the entire dataset while maintaining **structured tables** (or *supertibble*), use `read_redcap()`:

```{r}
# Load required packages
library(REDCapTidieR)

# Read entire REDCap project data
immuno <- read_redcap(redcap_uri = uri, token = token)

# print the structure of imported data
immuno
```

# Exploring the Data

The supertibble object can be viewed with the [RStudio Data Viewer](https://cloud.r-project.org/web/packages/REDCapTidieR/vignettes/glossary.html#data-viewer). You can click on the table icon in the Environment tab to view of the supertibble in the data viewer. At a glance you see an overview of the instruments in the REDCap project.

<center>

![Data Viewer showing the `immuno` supertibble](images/supertibble.gif)

</center>

You can drill down into individual tables in the `redcap_data` and `redcap_metadata` columns. Note that in the `demographics` data tibble, each row represents a patient, identified by their `record_id`.

<center>

![Data Viewer showing the `demographics` data tibble](images/data_metadata.gif)

</center>

In the `pet_imaging` data tibble, each row represents a PET scan information of a specific patient. Each row is identified by the combination of `record_id` and `redcap_form_instance`. This difference in [granularity](glossary.html#granularity) is because `pet_imaging` is a [**repeating**](glossary.html#repeating) instrument whereas `demographics` is a [**nonrepeating**](glossary.html#nonrepeating) instrument.

<center>

![Data Viewer showing the `pet_imaging` data tibble](images/repeating.gif)

</center>

You can also explore the metadata tibbles in the `redcap_metadata` column to find out about [field labels](glossary.html#field-label), [field types](glossary.html#field-type), and other field attributes.

<center>

![Data Viewer showing the `demographics` metadata tibble](images/demographics-metadata.gif)

</center>

## Extracting data tibbles from the supertibble

`REDCapTidieR` provides three different functions to extract data tibbles from a supertibble.

### Binding data tibbles into the environment

The `bind_tibbles()` function takes a supertibble and binds its data tibbles directly into the global [environment](glossary.html#environment). When you use `bind_tibbles()` while working interactively in the RStudio IDE, you will see data tibbles appear in the Environment pane.

```{r}
immuno |> bind_tibbles()
```


<center>

![Demonstration of the `bind_tibbles` function](images/bind-tibble.gif)

</center>

By default, `bind_tibbles()` extracts all data tibbles from the supertibble. With the `tbls` argument you can specify a subset of data tibbles that should be extracted. 

### Extracting a list of data tibbles

The `extract_tibbles()` function takes a supertibble and returns a named list of data tibbles. The default is to extract all data tibbles. We use `str` here to show the structure of the list returned by `extract_tibbles()`.

```{r}
immuno_instrument_list <- immuno |>
  extract_tibbles()

immuno_instrument_list |>
  str(max.level = 1)
```

## Adding variable labels with the labelled package

`REDCapTidieR` package allows you to attach labels to variables in the supertibble. Variable labels can make data exploration easier. 

```{r}
immuno |>
  make_labelled() |>
  bind_tibbles()
```

The `make_labelled()` function takes a supertibble and returns a supertibble with variable labels applied to the variables of the supertibble as well as to the variables of all data and metadata tibbles in the `redcap_data` and `redcap_metadata` columns of the supertibble.

<center>

The RStudio Data Viewer shows variable labels below variable names.

![Data Viewer showing part of a labelled supertibble](images/labelled-supertibble.gif)

</center>

You can use the `labelled::look_for()` function to explore the variable labels of a tibble.

```{r}
labelled::look_for(mortality_data)
```

These labels are the REDCap **field labels** that prompt data entry in the REDCap instrument. `REDCapTidieR` places them into the `field_label` variable of the instrument's metadata tibble. Below you can see that the field labels of the REDCap instrument for `mortality_data` are the same as the labels above.

<center>

![REDCap data entry view of the `mortality_data` instrument](images/mortality-data-form.png)

</center>

In the `demographics` instrument, a label has a trailing colon `:` (check the label of `autoimmune_disease_select___9` variable below). This won't look good as a variable label so let's remove it. 

```{r}
labelled::look_for(demographics)
```

The `make_labelled()` function has a `format_labels` argument that you can use to preprocess labels before applying them to variables.

```{r}
immuno |>
  make_labelled(format_labels = ~ gsub(":", "", .)) |>
  bind_tibbles()

labelled::look_for(demographics, "autoimmune")
```

This remove all colons in labels. 

To removing trailing `:` characters from a field label `REDCapTidieR` provides a format helper function that you can pass to the `format_labels` argument:

```{r}
fmt_strip_trailing_colon("Select Autoimmune Disease(s) Other, specify:")
```

To find out about other helpers included with REDCapTidieR, see `` ?`format-helpers` ``.

The `format_labels` argument will also accept multiple functions in a vector or list. You can pass any function that takes a character vector and returns a modified character vector to `format_labels`. In the following example, we remove the trailing colon with `fmt_strip_trailing_colon()` and then make the labels lower case with `base::tolower()`.

```{r}
immuno |>
  make_labelled(
    format_labels = c(
      fmt_strip_trailing_colon,
      base::tolower
    )
  ) |>
  bind_tibbles()

labelled::look_for(demographics)
```

## Renaming column names using labels

Some columns associated with **checkbox fields** in REDCap forms often have less intuitive names. For example, in the `melanoma_data` instrument, the melanoma type columns are named as `mel_type___1`, `mel_type___2`, `mel_type___3`, etc. These names correspond to different melanoma subtypes but are not easily interpretable.

To improve readability, these columns can be renamed using their corresponding labels, making the dataset more intuitive for analysis. The following function automates this renaming process by extracting variable labels and applying them to the column names.

```{r}
# This function rename checkbox columns using the labels
rename_checkbox_columns <- function(instrument, column_name_prefix) {
  # List of column names to rename 
  col_names_to_rename <- labelled::look_for(instrument, column_name_prefix)$variable
  # New names for the selected columns
  new_names <- labelled::look_for(instrument, column_name_prefix)$label
  new_names <- str_replace_all(new_names, " ", "_")
  new_names <- str_replace_all(new_names, ":", "")
  # Rename the columns
  names(instrument)[names(instrument) %in% col_names_to_rename] <- new_names
  return(instrument)
}
```


```{r}
melanoma_data <- rename_checkbox_columns(melanoma_data, "mel_type___")
head(melanoma_data)
```

## Viewing the Data

This section demonstrates different ways to get to know the `immuno` dataset and its instruments. 

When the name of the object is typed, the first few lines along with some information, such as the number of rows are displayed:

```{r}
immuno
```

To view any column displayed above in the `immuno` object, you can specify the column number within `[[]]` or column name followed by `$`.

- For example to view column 1:

```{r}
immuno[[1]]
```

- For example to view `redcap_form_name` column:

```{r}
immuno$redcap_form_name
```

A similar method can be used to access the patient data in all instruments using the `redcap_data` column or the 3rd column in this case. However, this displays patient data of all the instruments one after the other, making it difficult to read. A better way is to view a single instrument as follows.

For example, to view the `mortality_data` instrument, we can access the redcap_data column first (i.e., `immuno$redcap_data` or `immuno[[3]]`) and then access the 15th instrument:

```{r}
#| eval: false
head(immuno$redcap_data[[15]]) # same as immuno[[3]][[15]]
```

The `dim()` function prints the dimensions (rows x columns):

```{r}
dim(immuno)
```

```{r}
dim(immuno$redcap_data[[15]])
```

This information is available at the environment pane in the top right panel as the number of observations (rows) and variables (columns).

The `nrow()` function prints the number of rows while `ncol()` prints the number of columns:

```{r}
nrow(immuno$redcap_data[[15]])
ncol(immuno$redcap_data[[15]])
```


The `View()` function gives a spreadsheet-like view of the data frame:

```{r}
#| eval: false
View(immuno)
```

By clicking the object on the environment tab also gives a spreadsheet-like view of the object: ![](images/environment-variable.jpg){fig-align="center"}

The `head()` function prints the top 6 rows of a data frame:

```{r}
head(immuno$redcap_data[[15]])
```

Similarly, the `tail()` function prints the bottom 6 rows of the data frame:

```{r}
tail(immuno$redcap_data[[15]])
```

The `colnames()` function displays all the column names:

```{r}
colnames(immuno$redcap_data[[15]])
```

The `$` symbol allows access to individual columns. To display `mortality_date` column:

```{r}
head(immuno$redcap_data[[15]]$mortality_date)
```

The `str()` function shows the structure of the data:

```{r}
str(immuno$redcap_data[[15]])
```

The `glimpse()`function (dplyr package) displays a compact summary of the data frame, showing you key details such as the data types of each column, the first few values, and the total number of observations.

```{r}
glimpse(immuno$redcap_data[[15]])
```

The `summary()` function generates summary statistics:

```{r}
summary(immuno$redcap_data[[15]])
```

A statistical overview can be obtained using the `skim()` function in skimr package:

```{r}
#| eval: false
#| classes: scrolling
library(skimr)
skim(immuno$redcap_data[[15]])
```

```{=html}
<details>
<summary>Output</summary>
```

```{r}
#| echo: false
#| classes: scrolling
library(skimr)
skim(immuno$redcap_data[[15]])
```

```{=html}
</details>
```

## Writing Data to a File

Writing data to a file is a fundamental operation in programming and data analysis. It involves taking data from within a program or environment and storing it in a file on a disk for later use or sharing. This section explains the basics of writing a data file using the **readr** package. 

The `write_csv()` and `write_tsv()` functions are part of the **readr** package, which is designed for writing delimited files like CSV (comma-separated values) and TSV (tab-separated values). These functions are used to write data frames into CSV and TSV files, respectively.

We first provide the variable name of the data frame followed by the file name (ideally including the full folder location). 

To write a CSV file:
```{r}
#| eval: false
# on Mac:
write_csv(cms_data, "~/Desktop/cms_data.csv")

# on Windows
write_csv(cms_data, "C:/Users/srajapaksa/Desktop/cms_data.csv")
```

To write a TSV file:
```{r}
#| eval: false
# on Mac:
write_tsv(cms_data, "~/Desktop/cms_data.csv")

# on Windows
write_tsv(cms_data, "C:/Users/srajapaksa/Desktop/cms_data.csv")
```

## The Pipe Operator (`|>`)

The *pipe* operator (`|>`) is a commonly used feature of the tidyverse. It was originally defined in the (cleverly named) magrittr package, but is also included in the `dplyr`, tidyverse packages. The `|>` symbol can seem confusing and intimidating at first. However, once you understand the basic idea, it can become addicting!

We suggest you use a shortcut: <kbd>⌘</kbd> + <kbd>Shift</kbd> + <kbd>M</kbd> (Mac) or <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>M</kbd> (Windows/Linux).

The `|>` symbol is placed between a value on the left and a function on the right. The `|>` simply takes the value to the left and passes it to the function on the right as the first argument. It acts as a "pipe". That's it!

Suppose we have a variable, `x`.

```{r}
x <- 7
```

The following are the exact same.

```{r}
sqrt(x)
```

```{r}
x |> sqrt()
```

We'll continue to use `|>` throughout this tutorial to show how useful it can be for chaining various data manipulation steps during an analysis.

### Chaining functions

R *chaining* allows you to streamline your data analysis workflow by sequentially applying multiple operations to your data using the pipe operator `|>`. We often need to perform several data manipulation or analysis operations in a sequence. Chaining allows you to apply these operations one after the other in a clear and concise manner.

Here's a basic template for chaining operations using the pipe operator `|>`:

```{r}
#| eval: false
result <- data |>
    operation1(...) |>
    operation2(...) |>
    operation3(...) |>
    ...
    operationN(...)
```

In this template:

-   `data` represents the input data frame or object.
-   `operation1`, `operation2`, ..., `operationN` represent the functions or operations you want to apply sequentially to the data.For example: `select()`, `filter()` or `mutate()` functions.
-   `...` represents any additional arguments or parameters that may be passed to each operation.

Each operation takes the output of the previous operation as its input, making it easy to chain multiple operations together. This improves the readability of your code by organizing operations in a left-to-right fashion and it avoids creating intermediate variables to store the results of each operation.

# Data manipulation with \`dplyr\` functions

You'll primarily use six key `dplyr` functions for data manipulations:

1.  **`filter()`:** pick observations based on their values.
2.  **`select()`:** pick variables by their names.
3.  **`mutate()`:** create new variables using functions applied to existing variables.
4.  **`summarise()`:** collapse multiple values into a single summary.
5.  **`group_by()`:** group the rows based on specified criteria.
6.  **`arrange()`:** reorder the rows based on specified criteria.

If you've already installed the tidyverse package (if not, you can do so by running the command: `install.packages("tidyverse")`), let's proceed to load it into our R session first:

```{r}
#| message: false
library(tidyverse)
```

Next, load the pre-processed RDS Object:

```{r}
immuno_dataset <- readRDS("data/Sample_immuno_dataset.rds")
```

**RDS (R Data Serialization)** files are used to save and load single R objects while preserving their structure, labels, and attributes. The *.rds* format is useful for storing dataframes, lists, models, and other complex objects. For convenience, the previously loaded REDCap dataset has been pre-processed and saved as an .rds file. This pre-processed version will be used throughout the remainder of the workshop. 

### `filter()`

The `filter()` function takes logical expressions and returns the rows for which all are `TRUE`.

![](http://ohi-science.org/data-science-training/img/rstudio-cheatsheet-filter.png)

**Example 1:** Find all records from the `melanoma_data` data frame where the melanoma type is cutaneous.

```{r}
immuno_dataset$redcap_data$melanoma_data |> 
  filter(melanoma_type == "cutaneous") |> 
  head(20)
```

Here we are *sending* the `immuno_dataset$redcap_data$melanoma_data` data frame into the function `filter()` which tests each value in melanoma_type column for the value "cutaneous" and returns the rows where this condition is TRUE.

You can check the dimension (number of rows and number of columns) of the resulting data frame by using the `dim()` function as follows:

```{r}
immuno_dataset$redcap_data$melanoma_data |> filter(melanoma_type == "cutaneous") |> dim()
```


**Example 2:** Identify records in `mortality_data` where time since first treatment dose  (`mortality_treatment_time`) exceeds 1 year. `mortality_treatment_time` is given in months. 

```{r}
immuno_dataset$redcap_data$mortality_data |> 
  filter(mortality_treatment_time > 12) |> 
  head(20)
```

We can use logical operators like and `&`, or `|` to combine multiple conditions as follows.

**Example 3:** Find all the records in `mortality_data` where cause of death (`mortality_cause`) is categorized as "melanoma progression" and has a date of last follow up or death (`mortality_date`)  before "2023-01-01"  

```{r}
immuno_dataset$redcap_data$mortality_data |> 
  filter(mortality_cause == "melanoma progression" & mortality_date > "2023-01-01") |> 
  head(20)
```

**Example 4:** Find the records in `melanoma_data` where `melanoma_molecular_mutation` is either braf or nras.

```{r}
immuno_dataset$redcap_data$melanoma_data |> 
  filter(melanoma_molecular_mutation == "braf" | melanoma_molecular_mutation == "braf") |> 
  head(20)
```

**Example 5:** Retrieve records where `mortality_cause` is due to "treatment toxicity" and `mortality_treatment_time` is greater than 4 months but less than or equal to 10 months.

```{r}
immuno_dataset$redcap_data$mortality_data |> 
  filter(
    mortality_cause == "treatment toxicity" & 
    mortality_treatment_time > 4 & 
    mortality_treatment_time <= 10) |> 
  head(20)
```

#### `%in%` helper

The `%in%` function is used to determine whether elements of one vector are present in another vector. It returns a logical vector indicating whether each element of the first vector is found in the second vector.

When we want to filter a subset of rows that may contain multiple different values, it's more efficient to provide a vector of the values of interest instead of combining multiple OR commands.

**Example 6:** Retrieve records where `melanoma_type` is acral, cutaneous or muscosal. 

```{r}
immuno_dataset$redcap_data$melanoma_data |> 
  filter(melanoma_type %in% c("acral", "cutaneous",  "muscosal")) |> 
  head(20)
```

### `select()`

The `select()` function returns a subset of the variables or columns.

![](http://ohi-science.org/data-science-training/img/rstudio-cheatsheet-select.png){fig-align="center"}

This function can accept column names (even without quotation marks) or the column position number starting from the left. Unlike in base R (we explore before), commands within the brackets in `select()` do not need to be concatenated using `c()`.

**Example 1:** Extract the record ID, ECG date (`ae_ecg_date`) and MRI date (`ae_mri_date`) columns from `adverse_events` data frame.

```{r}
immuno_dataset$redcap_data$adverse_events |> 
  select(record_id, ae_ecg_date, ae_mri_date) |> 
  head(20)
```

Using column positions:

```{r}
immuno_dataset$redcap_data$adverse_events |> 
  select(1, 23, 32) |> 
  head(20)
```

We can use the '-' symbol to extract all columns except for specific ones:

```{r}
immuno_dataset$redcap_data$demographics |> 
  select(-redcap_event, -ur, -sex, -dob, -height, -weight) |> 
  head(20)
```

Or use a combination of column names and positions:

```{r}
#| eval: false
immuno_dataset$redcap_data$demographics |> 
  select(1, medical_history, 15) |> 
  head(20)
```

#### Useful helper functions

The select helper functions (check `?select_helpers`) are a set of convenience functions provided by the `dplyr` package. These functions offer shortcuts for selecting columns based on specific criteria or patterns, making it easier to work with data frames.

Some commonly used select helper functions include:

1.  **`starts_with()`:** selects columns that start with a specified prefix.

```{r}
immuno_dataset$redcap_data$immune_related_adverse_events_iraes |> 
  select(starts_with('liver')) |> 
  head(20)
```

2.  **`ends_with()`:** selects columns that end with a specified suffix.

```{r}
immuno_dataset$redcap_data$immune_related_adverse_events_iraes |> 
  select(ends_with('date')) |> 
  head(20)
```

3.  **`contains()`:** selects columns that contain a specified substring.

```{r}
#| eval: false
immuno_dataset$redcap_data$immune_related_adverse_events_iraes |> 
  select(contains('skin')) |> 
  head(20)
```

4.  **`everything()`:** Selects all columns.

This function returns all column names that have not been specified. It is often used when reordering all columns in a dataframe:

```{r}
#| eval: false
immuno_dataset$redcap_data$immune_related_adverse_events_iraes |> 
  select(1, starts_with("gastro"), everything()) |> 
  head(20)
```

Here the dimensions of the dataframe is not changed, merely the column order.

::: {callout-tip}
You can combine multiple helper functions to create more complex selection criteria. Additionally, you can use the '-' symbol in front of the helper function to exclude the matched columns.
:::

### `mutate()`

The `mutate()` function adds new columns of data, thus 'mutating' the contents and dimensions of the input data frame.

![](http://ohi-science.org/data-science-training/img/rstudio-cheatsheet-mutate.png)

**Example 1:** Calculate the BMI of patients (i.e, $\text{BMI } = \frac{\text{nweight}}{\text{height in m} \times \text{ height in m}} \times 100$).

Here we use the `round()` function to round off the result to the closest integer or numeric value as number of responses cannot contain decimal values.

```{r}
immuno_dataset$redcap_data$demographics |> 
  mutate(bmi_new = weight / (height/100 * height/100)) |> 
  head(20)
```

This creates a new column at the end of the data frame named `bmi_new` and computes the BMI. Because the number of columns is expanding, we can reduce the number of columns displayed using the `select()` function.

To do this, we need to use *chaining* which is discussed below.

### `mutate()` continued

Let's use chaining to combine both `select()` and `mutate()` operations for the previous example:

```{r}
immuno_dataset$redcap_data$demographics |> 
  select(record_id, weight, height, bmi) |> 
  mutate(bmi_new = weight / (height/100 * height/100)) |> 
  head(20)
```

### `summarise()`

The `summarise()` function creates individual summary statistics from larger data sets.

![](http://ohi-science.org/data-science-training/img/rstudio-cheatsheet-summarise.png)

The output of `summarise()/summarize()` differs qualitatively from the input. It results in a smaller dataframe with a reduced representation of the original data. While not strictly necessary, it's advisable to assign new column names for the summary statistics generated by this function. This practice enhances clarity and organization in your data analysis workflow.

**Example 1:** Calculate the mean number of creatinine (`sys_path_creat`) in `prior_treatment` data frame.

```{r}
immuno_dataset$redcap_data$prior_treatment |> 
  summarise(mean_creatinine = mean(sys_path_creat))
```

This results in a data frame of size 1 row $\times$ 1 col with a value of `NA`, indicating that the result is either *N*ot *A*pplicable or missing. This occurs because the column contains missing values, making the mean calculation invalid. To compute the mean creatinine level while excluding missing values, use the `na.rm = TRUE` argument in the `mean()` function.

```{r}
immuno_dataset$redcap_data$prior_treatment |> 
  summarise(mean_creatinine = mean(sys_path_creat, na.rm = TRUE))
```

We can create additional summary statistics by adding them in a comma-separated sequence as follows:

```{r}
immuno_dataset$redcap_data$prior_treatment |> 
  summarise(mean_creatinine = mean(sys_path_creat, na.rm = TRUE),
            min_creatinine = min(sys_path_creat, na.rm = TRUE),
            max_creatinine = max(sys_path_creat, na.rm = TRUE),
            total_creatinine = sum(sys_path_creat, na.rm = TRUE))
```

#### `n()` helper function

This function counts the number of observations in a dataset. It does not take any arguments, but simply counts the rows.

```{r}
immuno_dataset$redcap_data$prior_treatment |> 
  summarise(mean_creatinine = mean(sys_path_creat, na.rm = TRUE),
            min_creatinine = min(sys_path_creat, na.rm = TRUE),
            max_creatinine = max(sys_path_creat, na.rm = TRUE),
            total_creatinine = sum(sys_path_creat, na.rm = TRUE), 
            n_rows = n())
```

### `arrange()`

The `arrange()` function orders rows based on the values in a given column.

![](images/arrange.png)

**Example 1:** Order the records based on the UR number in `demographics`.

```{r}
immuno_dataset$redcap_data$demographics |> 
  arrange(ur) |> 
  head(20)
```

**Example 2:** Sort the records in `mortality_data` based on the mortality date first and then by last scan date (`date_last_scan`). 

```{r}
immuno_dataset$redcap_data$mortality_data |> 
  arrange(mortality_date, date_last_scan) |> 
  head(20)
```

#### `desc()` helper function

This function is used to sort data in descending order.

**Example 3:** Sort the records in `mortality_data` in descending order based on the `mortality_treatment_time`.

```{r}
immuno_dataset$redcap_data$mortality_data |> 
  arrange(desc(mortality_treatment_time)) |> 
  head(20)
```

### `count()` helper

The `count()` function is used to count the number of occurrences of unique values in one or more variables within a data frame. This function is particularly useful for summarizing data and understanding the distribution of values within a dataset.

**Example 1:** Count the number of melanoma types in `melanoma_data` data frame.

```{r}
immuno_dataset$redcap_data$melanoma_data |> 
  count(melanoma_type)
```

**Example 2:** Count the number of records observed in each melanoma type and melanoma molecular mutation.

```{r}
immuno_dataset$redcap_data$melanoma_data |> 
  count(melanoma_type, melanoma_molecular_mutation)
```

::: {.callout-note title = "Try It Yourself" }

Try out the following examples by yourself first.

1.  Find the total number of male deaths in each year.

To find the total number of male deaths in each year, we begin by filtering out the rows where the Sex column contains "Male" and the type column conatins "Mortality", as we are only interested in male deaths.

```{r}
#| eval: false
cancer_mort |> filter(Sex == "Male" & Type == "Mortality")
```

Since we need to compute the total number of deaths **in each year**, we group this filtered data frame by year. This will create a grouping for each year. This grouping allows us to compute the total number of deaths (i.e., Counts) for each year.

```{r}
#| eval: false
cancer_mort |> 
  filter(Sex == "Male" & Type == "Mortality") |> 
  group_by(Year)
```

Putting these operations/functions together, we obtain the final answer:

```{=html}
<details>
  <summary>Check the Answer</summary>
```
```{r}
#| eval: false
cancer_mort |> 
  filter(Sex == "Male" & Type == "Mortality") |> 
  group_by(Year) |> 
  summarise(tot_male_deaths = sum(Count))
```

</details>

2.  Find the top three cancer types and the age group with the highest average cancer incidences reported across all years.

**Hints:**

-   Since we are concerned only about cancer incidences, first filter the dataset using `filter()` function to include only the rows with cancer incidences.
-   Next, compute the average of cancer incidences reported across all years. If we use `summarise()` function next, we will have a single average value for the whole data frame. However, this question asks us to find the top three cancer types and age group, which means we need to compute the average after grouping the rows based on cancer type and age group. This can be achieved using the `group_by()` function with multiple columns as arguments (e.g., `group_by(col1, col2)`).
-   Once grouped, use `summarise()` function to compute the mean across these groupings.
-   Since we're interested in only the top three highest values, chain the result of the above functions to the `arrange()` function to sort the averages in descending order.

```{=html}
<details>
  <summary>Check the Answer</summary>
```
```{r}
#| eval: false
cancer_mort |> 
  filter(Type == "Incidence") |> 
  group_by(Cancer_Type, Age) |> 
  summarise(average = mean(Count)) |> 
  arrange(desc(average))
```

</details>

3.  Find the year, cancer type and age group with the highest cancer count observed among age groups above 29.

**Hints:**

-   Start by selecting the columns of interest using the `select()` function. Remember you need to include four columns.
-   Next, filter the rows to include only those with age groups above 29. We can use the `%in%` operator with a vector of age groups to filter rows using the `filter()` function. For example: `filter(Age %in% c("30-34", "35-39", "40-44", "45-49", ..., "85+")`. This is time consuming and laborious as we need to type 10+ age groups. There are two ways to make this step easier:
    1.  Using the `unique()` function: This function returns a vector/data frame with duplicate elements removed. In other words, it returns the unique elements. Find the unique elements of the age column (i.e., `unique(cancer_mort$Age)`) and then create a char vector manually by copying and pasting the age groups of interest.
    2.  Using `!` operator: The easiest way is to select all the age groups that is less than or equal to 29 and then use the `!` (NOT) operator to negate the logical vector. For example: `filter(!Age %in% c('0-4', '5-9', '10-14','15-19', '20-24', '25-29'))` This will select the rows that does not contain age groups in the given vector.
-   Finnaly, sort the resulting data frame to find the highest cancer count.

```{=html}
<details>
  <summary>Check the Answer</summary>
```
```{r}
#| eval: false
cancer_mort |> 
  filter(!Age %in% c('0-4', '5-9', '10-14','15-19', '20-24', '25-29')) |> 
  arrange(desc(Count))
```

</details>

4.  Find the minimum, maximum, number of observations and quartile statistics for each cancer type among women, men and other genders.

```{=html}
<details>
  <summary>Check the Answer</summary>
```
```{r}
#| eval: false
cancer_mort |> 
  group_by(Cancer_Type, Sex) |> 
  summarise(minimum_count = min(Count), 
            quartile_1 = quantile(Count, probs = 0.25), 
            quartile_2 = median(Count),
            quartile_3 = quantile(Count, probs = 0.75),
            maximum_count = max(Count),
            n_count = n())
```

</details>

5.  Find the percentage of deaths attributed to each type of cancer as a function of the total number of deaths.

```{=html}
<details>
  <summary>Check the Answer</summary>
```

```{r}
#| eval: false
cancer_mort |> 
  filter(Type == "Incidence") |> 
  group_by(Cancer_Type) |>
  summarise(tot_deaths = sum(Count)) |> 
  mutate(percent_deaths = (tot_deaths * 100)/sum(tot_deaths)) 
```

</details>



:::